0
1
00:00:00,700 --> 00:00:05,940
In the previous video I have told you that we can import lots of different stuff using Webpack.
1

2
00:00:06,130 --> 00:00:07,540
So let's get crazy today
2

3
00:00:07,550 --> 00:00:09,690
and import an image! With Webpack
3

4
00:00:09,700 --> 00:00:13,960
I can import the images inside my javascript code all day long!
4

5
00:00:13,960 --> 00:00:17,110
I have already placed an image inside an src folder.
5

6
00:00:17,110 --> 00:00:19,450
This image is called kiwi.jpg.
6

7
00:00:19,930 --> 00:00:24,340
Let's create a new JavaScript file where we will be adding that image to the DOM.
7

8
00:00:24,340 --> 00:00:26,650
I will call this file add-image.js.
8

9
00:00:31,420 --> 00:00:32,200
Inside this file
9

10
00:00:32,200 --> 00:00:35,070
I will create a function which will add an image to the DOM.
10

11
00:00:35,350 --> 00:00:37,150
I will call this function addImage.
11

12
00:00:41,210 --> 00:00:42,260
Inside this function
12

13
00:00:42,260 --> 00:00:47,990
I'll create an img DOM element, specify an alt, width and src properties.
13

14
00:00:52,830 --> 00:00:56,330
But what should we put inside the src property?
14

15
00:00:56,340 --> 00:00:58,420
Now it's time to import our image.
15

16
00:01:03,100 --> 00:01:09,880
Now Kiwi contains the public URL to the file, and we can simply assign it to the
16

17
00:01:09,880 --> 00:01:10,270
image.src.
17

18
00:01:13,880 --> 00:01:17,570
let's add our newly  created img DOM element to the body DOM element.
18

19
00:01:23,850 --> 00:01:33,360
Don't forget to export our function because we need to import it inside the index.js file.
19

20
00:01:33,480 --> 00:01:42,230
Now let's go to index.js and import addImage function there. I will add it right after importing
20

21
00:01:42,230 --> 00:01:42,650
helloWorld.
21

22
00:01:45,860 --> 00:01:48,350
And now we need to invoke addImage function.
22

23
00:01:51,400 --> 00:01:57,160
The coding part is done, but Webpack doesn't know yet how to import this image. We still need to
23

24
00:01:57,160 --> 00:02:03,920
teach Webpack how to import image files. So we need to go to Webpack configuration file and add a specific
24

25
00:02:03,920 --> 00:02:12,380
rule there which will tell Webpack how to import image files. Inside Webpack.config.js we need
25

26
00:02:12,380 --> 00:02:13,610
to add a new property.
26

27
00:02:17,550 --> 00:02:25,040
This property is called module and this is a javascript object. Inside this object we'll have another
27

28
00:02:25,070 --> 00:02:26,630
property called rules.
28

29
00:02:30,440 --> 00:02:37,960
This property simply contains an array of specific rules. Each rule is an object itself. It has 
29

30
00:02:37,960 --> 00:02:39,100
at least 2 properties.
30

31
00:02:39,100 --> 00:02:40,180
First one is test.
31

32
00:02:43,650 --> 00:02:45,900
Here I will write a regular expression.
32

33
00:02:53,150 --> 00:02:59,520
This regular expression will match png and jpg files. It checks if the file name contains either .png
33

34
00:02:59,550 --> 00:03:06,470
or .jpg. 2nd property inside the rules object is called "use".
34

35
00:03:10,850 --> 00:03:16,610
Here we can specify which loader should be used by Webpack when it needs to import png or jpg file.
35

36
00:03:16,610 --> 00:03:26,040
In this case we will use file-loader. So every time we try to import a jpg file, Webpack will check
36

37
00:03:26,070 --> 00:03:27,540
if it has a rule for it.
37

38
00:03:27,750 --> 00:03:32,670
If it doesn't find a suitable rule it will give an error which means something like the following:
38

39
00:03:33,180 --> 00:03:33,600
"Hey,
39

40
00:03:33,720 --> 00:03:36,700
Unfortunately I don't know how to import this file.
40

41
00:03:36,720 --> 00:03:38,340
Please tell me what I should do with it."
41

42
00:03:39,350 --> 00:03:46,850
On the other hand if it finds a rule for this file it will import the file according to the rule.
42

43
00:03:46,850 --> 00:03:53,800
Let's imagine we have more than 1 rule. I will add one more rule to our configuration just for the purpose
43

44
00:03:53,800 --> 00:04:00,480
of this example.
44

45
00:04:00,520 --> 00:04:06,470
Let's see how Webpack handles importing of the new file. It thinks the following way:
45

46
00:04:08,090 --> 00:04:11,510
"I need to import a file called kiwi.jpg.
46

47
00:04:11,690 --> 00:04:14,800
Do I know by heart how to import jpg files?"
47

48
00:04:14,840 --> 00:04:21,080
My comment here. For some files Webpack knows how to import them by heart even without any additional
48

49
00:04:21,080 --> 00:04:22,010
loaders.
49

50
00:04:22,010 --> 00:04:28,550
Example would be JavaScript files. You can import JavaScript file right away, without additional configuration.
50

51
00:04:28,550 --> 00:04:32,120
But let's listen to wetback further.
51

52
00:04:32,200 --> 00:04:35,170
"No, I don't know how to import JPG files.
52

53
00:04:35,170 --> 00:04:37,540
Let's have a look at my rules.
53

54
00:04:37,540 --> 00:04:40,270
It seems I have two rules.
54

55
00:04:40,270 --> 00:04:45,250
Let's have a look at the first one.
55

56
00:04:45,310 --> 00:04:48,220
Is it applicable to JPG files?
56

57
00:04:48,230 --> 00:04:52,280
No it's applicable to XML files and we have a JPG file here.
57

58
00:04:52,970 --> 00:04:56,570
So let's have a look at the next rule.
58

59
00:04:56,610 --> 00:04:58,890
Is it applicable to JPG files?
59

60
00:04:58,890 --> 00:05:01,950
Well it is applicable to png and JPG.
60

61
00:05:02,040 --> 00:05:07,040
So this rule is applicable to JPG  files, so I will use this rule.
61

62
00:05:07,080 --> 00:05:08,820
What does it tell me to do?
62

63
00:05:08,820 --> 00:05:14,300
It tells me that I need to use file-loader for jpg files. So I will do that.
63

64
00:05:14,400 --> 00:05:15,570
I will use a file loader"
64

65
00:05:18,760 --> 00:05:19,460
There are many loaders
65

66
00:05:19,470 --> 00:05:22,560
that help Webpack to import many different files.
66

67
00:05:22,560 --> 00:05:25,730
You just need to know which one you need and install it.
67

68
00:05:25,800 --> 00:05:31,950
In this case we are using file-loader which instructs Webpack to copy the required file into the output
68

69
00:05:31,950 --> 00:05:32,790
folder.
69

70
00:05:32,880 --> 00:05:39,510
By default the file name of the resulting file is MD5 hash of the file contents with the original
70

71
00:05:39,510 --> 00:05:42,510
extension.
71

72
00:05:42,960 --> 00:05:47,810
Now I need to remove the first rool from here because we don't need it anymore.
72

73
00:05:47,810 --> 00:05:55,020
It was needed just for the purpose of this demonstration. And we need to install file-loader.
73

74
00:05:55,110 --> 00:05:56,400
I will go to the terminal
74

75
00:05:59,040 --> 00:06:00,510
and write here:
75

76
00:06:00,720 --> 00:06:13,450
"npm install file-loader --save-dev". And I will run it. So file-loader is installed now
76

77
00:06:13,870 --> 00:06:17,030
and we can try to run Webpack and see what happens.
77

78
00:06:22,840 --> 00:06:24,440
So our build is done.
78

79
00:06:24,460 --> 00:06:30,330
This is not enough yet, but we can go and check what we have in the browser right now. I will refresh my page,
79

80
00:06:30,330 --> 00:06:33,950
and for some reason image is not there.
80

81
00:06:34,230 --> 00:06:43,090
So let's check Developer Tools. Actually img tag is rendered, but src attribute is wrong. It just contains
81

82
00:06:43,090 --> 00:06:48,570
the name of the image which is now MD5 hash, however, ideally it should contain
82

83
00:06:48,580 --> 00:06:54,590
also the path to the image. As you know, our image is located inside the dist folder.
83

84
00:06:54,610 --> 00:06:56,820
So we need to specify this somewhere.
