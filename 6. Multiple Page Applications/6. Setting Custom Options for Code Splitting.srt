0
1
00:00:00,540 --> 00:00:05,130
In the previous video we have learned how to extract common dependencies into a separate bundle.
1

2
00:00:05,180 --> 00:00:09,830
We used lodash in our example and webpack has put it into a separate bundle.
2

3
00:00:09,840 --> 00:00:11,140
Let's try to do the same
3

4
00:00:11,140 --> 00:00:12,400
with React now.
4

5
00:00:12,510 --> 00:00:21,230
But first let's remove lodash and remove our upperFirst function. Because we don't include lodash anymore.
5

6
00:00:22,660 --> 00:00:24,420
I will do the same in kiwi.js
6

7
00:00:31,340 --> 00:00:31,980
okay.
7

8
00:00:32,040 --> 00:00:33,100
We are done.
8

9
00:00:33,190 --> 00:00:34,780
So now let's import  React.
9

10
00:00:41,740 --> 00:00:53,460
I will do the same in kiwi.js.
10

11
00:00:53,550 --> 00:00:55,370
Now we would need to install react.
11

12
00:00:55,760 --> 00:00:56,670
Let's do it.
12

13
00:00:56,730 --> 00:00:59,940
Let's go to our terminal and install React.
13

14
00:01:07,690 --> 00:01:10,510
Now let's run our build in the terminal and see what happens.
14

15
00:01:16,820 --> 00:01:19,250
If we look at the bundles that webpack generated,
15

16
00:01:19,280 --> 00:01:22,890
we'll see that there is no additional javascript bundle here.
16

17
00:01:23,000 --> 00:01:25,330
There are only Kiwi.<something>.js
17

18
00:01:25,340 --> 00:01:25,990
and
18

19
00:01:26,030 --> 00:01:26,510
hello-world.<something>.js.
19

20
00:01:26,650 --> 00:01:27,040
And
20

21
00:01:27,050 --> 00:01:28,130
that's it.
21

22
00:01:28,130 --> 00:01:31,780
But previously we had an additional bundle including lodash dependency.
22

23
00:01:31,820 --> 00:01:33,140
So what happened?
23

24
00:01:33,200 --> 00:01:40,690
You see, by default webpack extracts common dependencies only when they exceed 30 kilobytes before minification.
24

25
00:01:41,030 --> 00:01:46,790
It worked with lodash because lodash is more than 30 kilobytes. But it doesn't work with React, because
25

26
00:01:46,790 --> 00:01:49,320
React is less than 30 kilobytes.
26

27
00:01:49,400 --> 00:01:50,510
So what do we do
27

28
00:01:50,540 --> 00:01:56,270
if we want to extract react into a separate bundle? There is a way to specify custom configuration options
28

29
00:01:56,270 --> 00:01:57,920
for splitting chunks.
29

30
00:01:57,920 --> 00:02:03,920
In our example let's make the threshold size smaller, let's say, 10 kilobytes.
30

31
00:02:04,100 --> 00:02:14,040
For this we would need to go to our editor, to the webpack production configuration, and add a new option
31

32
00:02:14,040 --> 00:02:23,400
inside optimisation option. This option is called minsize. And we will specify 10 thousand here.
32

33
00:02:26,010 --> 00:02:29,640
We can also specify another name delimiter for this additional bundle.
33

34
00:02:32,760 --> 00:02:38,890
So we'll have a new option here which is called automatic name delimiter.
34

35
00:02:43,530 --> 00:02:51,050
And we will put an underscore there. Let's run our build now and see if anything changes.
35

36
00:03:05,060 --> 00:03:10,880
I will scroll up.
36

37
00:03:10,990 --> 00:03:14,760
We can see that now we have a separate bundle named
37

38
00:03:14,800 --> 00:03:23,600
vendors_hello-world_kiwi.< something >.js. It is only 7 kilobytes in size and uses underscores as file
38

39
00:03:23,610 --> 00:03:24,940
delimiters.
39

40
00:03:25,390 --> 00:03:26,480
What's important,
40

41
00:03:26,710 --> 00:03:28,330
Our kiwi.js
41

42
00:03:28,370 --> 00:03:33,230
and hello-world.js bundles are less than two kilobytes each.
42

43
00:03:33,490 --> 00:03:38,320
In this video we have learned how to set custom criteria for extracting common dependencies.
